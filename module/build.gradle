import org.jf.dexlib2.DexFileFactory
import org.jf.dexlib2.Opcodes
import org.jf.dexlib2.rewriter.DexRewriter
import org.jf.dexlib2.rewriter.Rewriter
import org.jf.dexlib2.rewriter.RewriterModule
import org.jf.dexlib2.rewriter.Rewriters

plugins {
    id('com.android.application')
    id('kotlin-android')
}

apply from: file(rootProject.file('module.gradle'))

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gitCommitCount
        versionName moduleVersion.substring(1)
        externalNativeBuild {
            cmake {
                arguments "-DMODULE_NAME:STRING=riru_$moduleId",
                        "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion",
                        "-DRIRU_MODULE_VERSION=$moduleVersionCode",
                        "-DRIRU_MODULE_VERSION_NAME:STRING=\"$moduleVersion\""

            }
        }
    }
    buildFeatures {
        viewBinding true
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    buildTypes {
        debug {
            multiDexEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dependenciesInfo {
        includeInApk false
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://dl.bintray.com/rikkaw/Libraries' }
}

dependencies {
    implementation 'rikka.ndk:riru:10'
    implementation 'rikka.ndk.thirdparty:nativehelper:20201111'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.annotation:annotation:1.1.0"

    implementation project(':aidl')
    implementation project(':shared')
    compileOnly project(':hidden-api-common')
    compileOnly project(':hidden-api-21')
}

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")
def riruDir = "$magiskDir/riru"

import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Files
import java.security.MessageDigest

static def calcSha256(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        def task = variant.assembleProvider.get()
        task.doLast {
            // clear
            delete { delete magiskDir }

            // copy dex
            copy {
                from zipTree(outputFile).matching { include 'classes.dex' }.singleFile
                into magiskDir
                rename { fileName -> 'sui.dex' }
            }

            copy {
                from zipTree(outputFile).matching { include 'res/*/*.xml' }
                into magiskDir
            }

            // patch dex
            def dex = DexFileFactory.loadDexFile("$magiskDir/sui.dex", Opcodes.forApi(minSdkVersion))
            def rewriter = new DexRewriter(new RewriterModule() {
                @Override
                Rewriter<String> getTypeRewriter(Rewriters rewriters) {
                    return new Rewriter<String>() {
                        @Override
                        String rewrite(String value) {
                            if (value.startsWith("L\$"))
                                return "L" + value.substring(2)
                            return value
                        }
                    }
                }
            })
            DexFileFactory.writeDexFile("$magiskDir/sui.dex", rewriter.dexFileRewriter.rewrite(dex))

            // copy apk
            /*copy {
                from outputFile
                into magiskDir
                rename { fileName -> 'sui.apk' }
            }
            exec {
                executable "zip"
                args "-d", "$magiskDir/sui.apk", "lib/*", "kotlin/*", "classes.dex", "META-INF/*"
            }*/

            // copy from template
            copy {
                from "$rootDir/template/magisk_module"
                into magiskDir.path
                exclude 'riru.sh'
            }
            // copy riru.sh
            copy {
                from "$rootDir/template/magisk_module"
                into magiskDir.path
                include 'riru.sh'
                filter { line ->
                    line.replaceAll('%%%RIRU_MODULE_ID%%%', moduleId)
                            .replaceAll('%%%RIRU_MODULE_API_VERSION%%%', moduleRiruApiVersion.toString())
                            .replaceAll('%%%RIRU_MODULE_MIN_API_VERSION%%%', moduleMinRiruApiVersion.toString())
                            .replaceAll('%%%RIRU_MODULE_MIN_RIRU_VERSION_NAME%%%', moduleMinRiruVersionName)
                }
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            // copy .git files manually since gradle exclude it by default
            Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

            // generate module.prop
            def modulePropText = ""
            magiskModuleProp.each { k, v -> modulePropText += "$k=$v\n" }
            modulePropText = modulePropText.trim()
            file("$magiskDir/module.prop").text = modulePropText

            // generate module.prop for Riru
            def riruModulePropText = ""
            moduleProp.each { k, v -> riruModulePropText += "$k=$v\n" }
            riruModulePropText = riruModulePropText.trim()
            file(riruDir).mkdirs()

            // module.prop.new will be renamed to module.prop in post-fs-data.sh
            file("$riruDir/module.prop.new").text = riruModulePropText

            // copy native files
            def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")
            copy {
                from "$nativeOutDir"
                into "$magiskDir/lib"
                exclude "**/*.txt"
            }

            // generate sha1sum
            fileTree("$magiskDir").matching {
                exclude "README.md", "META-INF"
            }.visit { f ->
                if (f.directory) return
                file(f.file.path + ".sha256sum").text = calcSha256(f.file)
            }
        }
        if (variant.buildType.name == "debug") {
            task.finalizedBy zipMagiskMoudleDebug
        } else {
            task.finalizedBy zipMagiskMoudleRelease
        }
    }
}

task zipMagiskMoudleRelease(type: Zip) {
    from magiskDir
    archiveName "riru-${moduleId}-${moduleVersion}-release.zip"
    destinationDir outDir
}

task zipMagiskMoudleDebug(type: Zip) {
    from magiskDir
    archiveName "riru-${moduleId}-${moduleVersion}-debug.zip"
    destinationDir outDir
}